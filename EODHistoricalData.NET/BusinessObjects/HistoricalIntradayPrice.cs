// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using EODHistoricalData.NET;
//
//    var historicalIntradayPrice = HistoricalIntradayPrice.FromJson(jsonString);

namespace EODHistoricalData.NET {
  using System;
  using System.Collections.Generic;

  using System.Globalization;
  using Newtonsoft.Json;
  using Newtonsoft.Json.Converters;

  public partial class HistoricalIntradayPrice {
    [JsonProperty("timestamp")]
    public long Timestamp { get; set; }

    [JsonProperty("gmtoffset")]
    public long GmtOffset { get; set; }

    [JsonProperty("datetime")]
    public DateTimeOffset DateTime { get; set; }

    [JsonProperty("open")]
    public double Open { get; set; }

    [JsonProperty("high")]
    public double High { get; set; }

    [JsonProperty("low")]
    public double Low { get; set; }

    [JsonProperty("close")]
    public double Close { get; set; }

    [JsonProperty("volume")]
    public long Volume { get; set; }
  }

  public partial class HistoricalIntradayPrice {
    public static List<HistoricalIntradayPrice> FromJson(string json) => JsonConvert.DeserializeObject<List<HistoricalIntradayPrice>>(json, EODHistoricalData.NET.Converter.Settings);
    public static List<HistoricalIntradayPrice> GetListFromJson(string json) => JsonConvert.DeserializeObject<List<HistoricalIntradayPrice>>(json, EODHistoricalData.NET.ConverterHistoricalPrice.Settings);
  }

  public static class SerializeHistoricalIntradayPrice {
    public static string ToJson(this List<HistoricalIntradayPrice> self) => JsonConvert.SerializeObject(self, EODHistoricalData.NET.Converter.Settings);
  }

  internal static class ConverterHistoricalIntradayPrice {
    public static List<string> Errors = new List<string>();
    public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
    {
      MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
      DateParseHandling = DateParseHandling.None,
      Converters =
      {
          new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal },
          new NullConverter(),
      },
      Error = delegate (object sender, Newtonsoft.Json.Serialization.ErrorEventArgs args)
      {
          Errors.Add(args.ErrorContext.Error.Message);
          args.ErrorContext.Handled = true;
      },
    };
  }
}
