// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using EODHistoricalData.NET;
//
//    var fundamentalFund = FundamentalFund.FromJson(jsonString);

namespace EODHistoricalData.NET
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using EODHistoricalData.NET.BusinessObjects;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class FundamentalFund
    {
        [JsonProperty("General")]
        public FundamentalGeneral General { get; set; }

        [JsonProperty("MutualFund_Data")]
        public MutualFundData MutualFundData { get; set; }
    }
    
    public partial class MutualFundData
    {
        [JsonProperty("Nav")]
        public decimal? Nav { get; set; }

        [JsonProperty("Prev_Close_Price")]
        public decimal? PrevClosePrice { get; set; }

        [JsonProperty("Update_Date")]
        public DateTimeOffset UpdateDate { get; set; }

        [JsonProperty("Portfolio_Net_Assets")]
        public decimal? PortfolioNetAssets { get; set; }

        [JsonProperty("Share_Class_Net_Assets")]
        public long ShareClassNetAssets { get; set; }

        [JsonProperty("Morning_Star_Rating")]
        public long MorningStarRating { get; set; }

        [JsonProperty("Morning_Star_Risk_Rating")]
        public long MorningStarRiskRating { get; set; }

        [JsonProperty("Morning_Star_Category")]
        public string MorningStarCategory { get; set; }

        [JsonProperty("Incepton_Date")]
        public DateTimeOffset InceptonDate { get; set; }

        [JsonProperty("Currency")]
        public string Currency { get; set; }

        [JsonProperty("Domicile")]
        public string Domicile { get; set; }

        [JsonProperty("Yield")]
        public decimal? Yield { get; set; }

        [JsonProperty("Yield_YTD")]
        public decimal? YieldYtd { get; set; }

        [JsonProperty("Yield_1Year_YTD")]
        public decimal? Yield1YearYtd { get; set; }

        [JsonProperty("Yield_3Year_YTD")]
        public decimal? Yield3YearYtd { get; set; }

        [JsonProperty("Yield_5Year_YTD")]
        public decimal? Yield5YearYtd { get; set; }

        [JsonProperty("Expense_Ratio")]
        public decimal? ExpenseRatio { get; set; }

        [JsonProperty("Expense_Ratio_Date")]
        public DateTimeOffset ExpenseRatioDate { get; set; }

        [JsonProperty("Asset_Allocation")]
        public Dictionary<string, AssetAllocation> AssetAllocation { get; set; }

        [JsonProperty("Value_Growth")]
        public Dictionary<string, ValueGrowth> ValueGrowth { get; set; }

        [JsonProperty("Top_Holdings")]
        public Dictionary<string, TopHolding> TopHoldings { get; set; }

        [JsonProperty("Market_Capitalization")]
        public Dictionary<string, MarketCapitalization> MarketCapitalization { get; set; }

        [JsonProperty("Sector_Weights")]
        public SectorWeights SectorWeights { get; set; }

        [JsonProperty("World_Regions")]
        public WorldRegions WorldRegions { get; set; }
    }

    public partial class AssetAllocation
    {
        [JsonProperty("Net_%")]
        public decimal? Net { get; set; }

        [JsonProperty("Long_%")]
        public decimal? Long { get; set; }

        [JsonProperty("Type")]
        public string Type { get; set; }

        [JsonProperty("Short_%")]
        public decimal? Short { get; set; }

        [JsonProperty("Category_Average")]
        public decimal? CategoryAverage { get; set; }

        [JsonProperty("Benchmark")]
        public decimal? Benchmark { get; set; }
    }

    public partial class MarketCapitalization
    {
        [JsonProperty("Size")]
        public string Size { get; set; }

        [JsonProperty("Category_Average")]
        public decimal? CategoryAverage { get; set; }

        [JsonProperty("Benchmark")]
        public decimal? Benchmark { get; set; }

        [JsonProperty("Portfolio_%")]
        public decimal? Portfolio { get; set; }
    }

    public partial class SectorWeights
    {
        [JsonProperty("Cyclical")]
        public Dictionary<string, Cyclical> Cyclical { get; set; }

        [JsonProperty("Defensive")]
        public Dictionary<string, Cyclical> Defensive { get; set; }

        [JsonProperty("Sensitive")]
        public Dictionary<string, Cyclical> Sensitive { get; set; }
    }

    public partial class Cyclical
    {
        [JsonProperty("Type")]
        public string Type { get; set; }

        [JsonProperty("Category_Average")]
        public decimal? CategoryAverage { get; set; }

        [JsonProperty("Amount_%")]
        public decimal? Amount { get; set; }

        [JsonProperty("Benchmark")]
        public decimal? Benchmark { get; set; }
    }

    public partial class TopHolding
    {
        [JsonProperty("Name")]
        public string Name { get; set; }

        [JsonProperty("Owned")]
        public decimal? Owned { get; set; }

        [JsonProperty("Change")]
        public decimal? Change { get; set; }

        [JsonProperty("Weight")]
        public decimal? Weight { get; set; }
    }

    public partial class ValueGrowth
    {
        [JsonProperty("Name")]
        public string Name { get; set; }

        [JsonProperty("Category_Average")]
        public decimal? CategoryAverage { get; set; }

        [JsonProperty("Benchmark")]
        public decimal? Benchmark { get; set; }

        [JsonProperty("Stock_Portfolio", NullValueHandling = NullValueHandling.Ignore)]
        public decimal? StockPortfolio { get; set; }

        [JsonProperty("Stocks_%", NullValueHandling = NullValueHandling.Ignore)]
        public decimal? Stocks { get; set; }
    }

    public partial class WorldRegions
    {
        [JsonProperty("Americas")]
        public Dictionary<string, ValueGrowth> Americas { get; set; }

        [JsonProperty("Greater Asia")]
        public Dictionary<string, ValueGrowth> GreaterAsia { get; set; }

        [JsonProperty("Greater Europe")]
        public Dictionary<string, ValueGrowth> GreaterEurope { get; set; }

        [JsonProperty("Market Classification")]
        public Dictionary<string, ValueGrowth> MarketClassification { get; set; }
    }

    public partial class FundamentalFund
    {
        public static FundamentalFund FromJson(string json) => JsonConvert.DeserializeObject<FundamentalFund>(json, EODHistoricalData.NET.ConverterFundamentalFund.Settings);
    }

    public static class SerializeFundamentalFund
    {
        public static string ToJson(this FundamentalFund self) => JsonConvert.SerializeObject(self, EODHistoricalData.NET.ConverterFundamentalFund.Settings);
    }

    internal static class ConverterFundamentalFund
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

}
