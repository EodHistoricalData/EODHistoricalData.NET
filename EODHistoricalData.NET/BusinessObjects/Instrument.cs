// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using EODHistoricalData.NET;
//
//    var instrument = Instrument.FromJson(jsonString);

namespace EODHistoricalData.NET
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class Instrument
    {
        [JsonProperty("Code")]
        public string Code { get; set; }

        [JsonProperty("Name")]
        public string Name { get; set; }

        [JsonProperty("Country")]
        public string Country { get; set; }

        [JsonProperty("Exchange")]
        public string Exchange { get; set; }

        [JsonProperty("Currency")]
        public string Currency { get; set; }

        [JsonProperty("Type")]
        public string Type { get; set; }
    }


    public partial class Instrument
    {
        public static List<Instrument> FromJson(string json) => JsonConvert.DeserializeObject<List<Instrument>>(json, EODHistoricalData.NET.ConverterInstrument.Settings);
    }

    public static class SerializeInstrument
    {
        public static string ToJson(this List<Instrument> self) => JsonConvert.SerializeObject(self, EODHistoricalData.NET.ConverterInstrument.Settings);
    }

    internal static class ConverterInstrument
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
