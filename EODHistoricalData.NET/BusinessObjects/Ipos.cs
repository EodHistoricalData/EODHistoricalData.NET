// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using EODHistoricalData.NET;
//
//    var ipos = Ipos.FromJson(jsonString);

namespace EODHistoricalData.NET
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class Ipos
    {
        [JsonProperty("type")]
        public string Type { get; set; }

        [JsonProperty("description")]
        public string Description { get; set; }

        [JsonProperty("from")]
        public DateTimeOffset From { get; set; }

        [JsonProperty("to")]
        public DateTimeOffset To { get; set; }

        [JsonProperty("ipos")]
        public List<Ipo> IposData { get; set; }
    }

    public partial class Ipo
    {
        [JsonProperty("code")]
        public string Code { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("exchange")]
        public string Exchange { get; set; }

        [JsonProperty("currency")]
        public string Currency { get; set; }

        [JsonProperty("start_date")]
        public DateTimeOffset? StartDate { get; set; }

        [JsonProperty("filing_date")]
        public DateTimeOffset? FilingDate { get; set; }

        [JsonProperty("amended_date")]
        public DateTimeOffset? AmendedDate { get; set; }

        [JsonProperty("price_from")]
        public double PriceFrom { get; set; }

        [JsonProperty("price_to")]
        public double PriceTo { get; set; }

        [JsonProperty("offer_price")]
        public double OfferPrice { get; set; }

        [JsonProperty("shares")]
        public long Shares { get; set; }

        [JsonProperty("deal_type")]
        public DealType DealType { get; set; }
    }

    public enum DealType { Amended, Expected, Filed, Priced, Withdrawn };

    public partial class Ipos
    {
        public static Ipos FromJson(string json) => JsonConvert.DeserializeObject<Ipos>(json, EODHistoricalData.NET.ConverterIpos.Settings);
    }

    public static class SerializeIpos
    {
        public static string ToJson(this Ipos self) => JsonConvert.SerializeObject(self, EODHistoricalData.NET.ConverterIpos.Settings);
    }

    internal static class ConverterIpos
    {
        public static List<string> Errors = new List<string>();
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                DealTypeConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal },
                new NullConverter(),
            },
            Error = delegate (object sender, Newtonsoft.Json.Serialization.ErrorEventArgs args)
            {
                Errors.Add(args.ErrorContext.Error.Message);
                args.ErrorContext.Handled = true;
            },
        };
    }

    internal class DealTypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(DealType) || t == typeof(DealType?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "Amended":
                    return DealType.Amended;
                case "Expected":
                    return DealType.Expected;
                case "Filed":
                    return DealType.Filed;
                case "Priced":
                    return DealType.Priced;
                case "Withdrawn":
                    return DealType.Withdrawn;
            }
            throw new Exception("Cannot unmarshal type DealType");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (DealType)untypedValue;
            switch (value)
            {
                case DealType.Amended:
                    serializer.Serialize(writer, "Amended");
                    return;
                case DealType.Expected:
                    serializer.Serialize(writer, "Expected");
                    return;
                case DealType.Filed:
                    serializer.Serialize(writer, "Filed");
                    return;
                case DealType.Priced:
                    serializer.Serialize(writer, "Priced");
                    return;
            }
            throw new Exception("Cannot marshal type DealType");
        }

        public static readonly DealTypeConverter Singleton = new DealTypeConverter();
    }
}
